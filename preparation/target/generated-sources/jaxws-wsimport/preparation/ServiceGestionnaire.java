
package preparation;

import java.util.List;
import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.2
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ServiceGestionnaire", targetNamespace = "http://ensibs.projet.fr/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ServiceGestionnaire {


    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<preparation.ModifierUtilisateurResponse>
     */
    @WebMethod(operationName = "modifierUtilisateur")
    @RequestWrapper(localName = "modifierUtilisateur", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ModifierUtilisateur")
    @ResponseWrapper(localName = "modifierUtilisateurResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ModifierUtilisateurResponse")
    public Response<ModifierUtilisateurResponse> modifierUtilisateurAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3);

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "modifierUtilisateur")
    @RequestWrapper(localName = "modifierUtilisateur", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ModifierUtilisateur")
    @ResponseWrapper(localName = "modifierUtilisateurResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ModifierUtilisateurResponse")
    public Future<?> modifierUtilisateurAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ModifierUtilisateurResponse> asyncHandler);

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "modifierUtilisateur", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ModifierUtilisateur")
    @ResponseWrapper(localName = "modifierUtilisateurResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ModifierUtilisateurResponse")
    @Action(input = "http://ensibs.projet.fr/ServiceGestionnaire/modifierUtilisateurRequest", output = "http://ensibs.projet.fr/ServiceGestionnaire/modifierUtilisateurResponse")
    public boolean modifierUtilisateur(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3);

    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<preparation.SupprimerUtilisateurResponse>
     */
    @WebMethod(operationName = "supprimerUtilisateur")
    @RequestWrapper(localName = "supprimerUtilisateur", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.SupprimerUtilisateur")
    @ResponseWrapper(localName = "supprimerUtilisateurResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.SupprimerUtilisateurResponse")
    public Response<SupprimerUtilisateurResponse> supprimerUtilisateurAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "supprimerUtilisateur")
    @RequestWrapper(localName = "supprimerUtilisateur", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.SupprimerUtilisateur")
    @ResponseWrapper(localName = "supprimerUtilisateurResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.SupprimerUtilisateurResponse")
    public Future<?> supprimerUtilisateurAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SupprimerUtilisateurResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "supprimerUtilisateur", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.SupprimerUtilisateur")
    @ResponseWrapper(localName = "supprimerUtilisateurResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.SupprimerUtilisateurResponse")
    @Action(input = "http://ensibs.projet.fr/ServiceGestionnaire/supprimerUtilisateurRequest", output = "http://ensibs.projet.fr/ServiceGestionnaire/supprimerUtilisateurResponse")
    public boolean supprimerUtilisateur(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<preparation.CommandeUtilisateurResponse>
     */
    @WebMethod(operationName = "commandeUtilisateur")
    @RequestWrapper(localName = "commandeUtilisateur", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.CommandeUtilisateur")
    @ResponseWrapper(localName = "commandeUtilisateurResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.CommandeUtilisateurResponse")
    public Response<CommandeUtilisateurResponse> commandeUtilisateurAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "commandeUtilisateur")
    @RequestWrapper(localName = "commandeUtilisateur", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.CommandeUtilisateur")
    @ResponseWrapper(localName = "commandeUtilisateurResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.CommandeUtilisateurResponse")
    public Future<?> commandeUtilisateurAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CommandeUtilisateurResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<java.lang.Integer>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "commandeUtilisateur", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.CommandeUtilisateur")
    @ResponseWrapper(localName = "commandeUtilisateurResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.CommandeUtilisateurResponse")
    @Action(input = "http://ensibs.projet.fr/ServiceGestionnaire/commandeUtilisateurRequest", output = "http://ensibs.projet.fr/ServiceGestionnaire/commandeUtilisateurResponse")
    public List<Integer> commandeUtilisateur(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<preparation.CreerUtilisateurResponse>
     */
    @WebMethod(operationName = "creerUtilisateur")
    @RequestWrapper(localName = "creerUtilisateur", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.CreerUtilisateur")
    @ResponseWrapper(localName = "creerUtilisateurResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.CreerUtilisateurResponse")
    public Response<CreerUtilisateurResponse> creerUtilisateurAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "creerUtilisateur")
    @RequestWrapper(localName = "creerUtilisateur", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.CreerUtilisateur")
    @ResponseWrapper(localName = "creerUtilisateurResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.CreerUtilisateurResponse")
    public Future<?> creerUtilisateurAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreerUtilisateurResponse> asyncHandler);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "creerUtilisateur", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.CreerUtilisateur")
    @ResponseWrapper(localName = "creerUtilisateurResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.CreerUtilisateurResponse")
    @Action(input = "http://ensibs.projet.fr/ServiceGestionnaire/creerUtilisateurRequest", output = "http://ensibs.projet.fr/ServiceGestionnaire/creerUtilisateurResponse")
    public int creerUtilisateur(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2);

    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<preparation.MajCarteResponse>
     */
    @WebMethod(operationName = "majCarte")
    @RequestWrapper(localName = "majCarte", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.MajCarte")
    @ResponseWrapper(localName = "majCarteResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.MajCarteResponse")
    public Response<MajCarteResponse> majCarteAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        List<String> arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "majCarte")
    @RequestWrapper(localName = "majCarte", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.MajCarte")
    @ResponseWrapper(localName = "majCarteResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.MajCarteResponse")
    public Future<?> majCarteAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        List<String> arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<MajCarteResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "majCarte", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.MajCarte")
    @ResponseWrapper(localName = "majCarteResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.MajCarteResponse")
    @Action(input = "http://ensibs.projet.fr/ServiceGestionnaire/majCarteRequest", output = "http://ensibs.projet.fr/ServiceGestionnaire/majCarteResponse")
    public boolean majCarte(
        @WebParam(name = "arg0", targetNamespace = "")
        List<String> arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<preparation.TheEnPreparationResponse>
     */
    @WebMethod(operationName = "theEnPreparation")
    @RequestWrapper(localName = "theEnPreparation", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.TheEnPreparation")
    @ResponseWrapper(localName = "theEnPreparationResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.TheEnPreparationResponse")
    public Response<TheEnPreparationResponse> theEnPreparationAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "theEnPreparation")
    @RequestWrapper(localName = "theEnPreparation", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.TheEnPreparation")
    @ResponseWrapper(localName = "theEnPreparationResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.TheEnPreparationResponse")
    public Future<?> theEnPreparationAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<TheEnPreparationResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "theEnPreparation", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.TheEnPreparation")
    @ResponseWrapper(localName = "theEnPreparationResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.TheEnPreparationResponse")
    @Action(input = "http://ensibs.projet.fr/ServiceGestionnaire/theEnPreparationRequest", output = "http://ensibs.projet.fr/ServiceGestionnaire/theEnPreparationResponse")
    public boolean theEnPreparation(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<preparation.ConnexionResponse>
     */
    @WebMethod(operationName = "Connexion")
    @RequestWrapper(localName = "Connexion", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.Connexion")
    @ResponseWrapper(localName = "ConnexionResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ConnexionResponse")
    public Response<ConnexionResponse> connexionAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg1
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "Connexion")
    @RequestWrapper(localName = "Connexion", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.Connexion")
    @ResponseWrapper(localName = "ConnexionResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ConnexionResponse")
    public Future<?> connexionAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ConnexionResponse> asyncHandler);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns int
     */
    @WebMethod(operationName = "Connexion")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "Connexion", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.Connexion")
    @ResponseWrapper(localName = "ConnexionResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ConnexionResponse")
    @Action(input = "http://ensibs.projet.fr/ServiceGestionnaire/ConnexionRequest", output = "http://ensibs.projet.fr/ServiceGestionnaire/ConnexionResponse")
    public int connexion(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<preparation.PaiementResponse>
     */
    @WebMethod(operationName = "paiement")
    @RequestWrapper(localName = "paiement", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.Paiement")
    @ResponseWrapper(localName = "paiementResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.PaiementResponse")
    public Response<PaiementResponse> paiementAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "paiement")
    @RequestWrapper(localName = "paiement", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.Paiement")
    @ResponseWrapper(localName = "paiementResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.PaiementResponse")
    public Future<?> paiementAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<PaiementResponse> asyncHandler);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "paiement", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.Paiement")
    @ResponseWrapper(localName = "paiementResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.PaiementResponse")
    @Action(input = "http://ensibs.projet.fr/ServiceGestionnaire/paiementRequest", output = "http://ensibs.projet.fr/ServiceGestionnaire/paiementResponse")
    public boolean paiement(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2);

    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<preparation.TheLivreResponse>
     */
    @WebMethod(operationName = "theLivre")
    @RequestWrapper(localName = "theLivre", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.TheLivre")
    @ResponseWrapper(localName = "theLivreResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.TheLivreResponse")
    public Response<TheLivreResponse> theLivreAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "theLivre")
    @RequestWrapper(localName = "theLivre", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.TheLivre")
    @ResponseWrapper(localName = "theLivreResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.TheLivreResponse")
    public Future<?> theLivreAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<TheLivreResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "theLivre", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.TheLivre")
    @ResponseWrapper(localName = "theLivreResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.TheLivreResponse")
    @Action(input = "http://ensibs.projet.fr/ServiceGestionnaire/theLivreRequest", output = "http://ensibs.projet.fr/ServiceGestionnaire/theLivreResponse")
    public boolean theLivre(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<preparation.CatalogueResponse>
     */
    @WebMethod(operationName = "catalogue")
    @RequestWrapper(localName = "catalogue", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.Catalogue")
    @ResponseWrapper(localName = "catalogueResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.CatalogueResponse")
    public Response<CatalogueResponse> catalogueAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "catalogue")
    @RequestWrapper(localName = "catalogue", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.Catalogue")
    @ResponseWrapper(localName = "catalogueResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.CatalogueResponse")
    public Future<?> catalogueAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CatalogueResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "catalogue", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.Catalogue")
    @ResponseWrapper(localName = "catalogueResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.CatalogueResponse")
    @Action(input = "http://ensibs.projet.fr/ServiceGestionnaire/catalogueRequest", output = "http://ensibs.projet.fr/ServiceGestionnaire/catalogueResponse")
    public List<String> catalogue();

    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<preparation.EtatCommandeResponse>
     */
    @WebMethod(operationName = "etatCommande")
    @RequestWrapper(localName = "etatCommande", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.EtatCommande")
    @ResponseWrapper(localName = "etatCommandeResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.EtatCommandeResponse")
    public Response<EtatCommandeResponse> etatCommandeAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "etatCommande")
    @RequestWrapper(localName = "etatCommande", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.EtatCommande")
    @ResponseWrapper(localName = "etatCommandeResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.EtatCommandeResponse")
    public Future<?> etatCommandeAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<EtatCommandeResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "etatCommande", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.EtatCommande")
    @ResponseWrapper(localName = "etatCommandeResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.EtatCommandeResponse")
    @Action(input = "http://ensibs.projet.fr/ServiceGestionnaire/etatCommandeRequest", output = "http://ensibs.projet.fr/ServiceGestionnaire/etatCommandeResponse")
    public String etatCommande(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<preparation.NotifierCommandeResponse>
     */
    @WebMethod(operationName = "notifierCommande")
    @RequestWrapper(localName = "notifierCommande", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.NotifierCommande")
    @ResponseWrapper(localName = "notifierCommandeResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.NotifierCommandeResponse")
    public Response<NotifierCommandeResponse> notifierCommandeAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        Commande arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "notifierCommande")
    @RequestWrapper(localName = "notifierCommande", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.NotifierCommande")
    @ResponseWrapper(localName = "notifierCommandeResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.NotifierCommandeResponse")
    public Future<?> notifierCommandeAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        Commande arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<NotifierCommandeResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "notifierCommande", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.NotifierCommande")
    @ResponseWrapper(localName = "notifierCommandeResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.NotifierCommandeResponse")
    @Action(input = "http://ensibs.projet.fr/ServiceGestionnaire/notifierCommandeRequest", output = "http://ensibs.projet.fr/ServiceGestionnaire/notifierCommandeResponse")
    public boolean notifierCommande(
        @WebParam(name = "arg0", targetNamespace = "")
        Commande arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<preparation.ThePrepareResponse>
     */
    @WebMethod(operationName = "thePrepare")
    @RequestWrapper(localName = "thePrepare", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ThePrepare")
    @ResponseWrapper(localName = "thePrepareResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ThePrepareResponse")
    public Response<ThePrepareResponse> thePrepareAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "thePrepare")
    @RequestWrapper(localName = "thePrepare", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ThePrepare")
    @ResponseWrapper(localName = "thePrepareResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ThePrepareResponse")
    public Future<?> thePrepareAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ThePrepareResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "thePrepare", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ThePrepare")
    @ResponseWrapper(localName = "thePrepareResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ThePrepareResponse")
    @Action(input = "http://ensibs.projet.fr/ServiceGestionnaire/thePrepareRequest", output = "http://ensibs.projet.fr/ServiceGestionnaire/thePrepareResponse")
    public boolean thePrepare(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<preparation.ColisAuLivreurResponse>
     */
    @WebMethod(operationName = "colisAuLivreur")
    @RequestWrapper(localName = "colisAuLivreur", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ColisAuLivreur")
    @ResponseWrapper(localName = "colisAuLivreurResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ColisAuLivreurResponse")
    public Response<ColisAuLivreurResponse> colisAuLivreurAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "colisAuLivreur")
    @RequestWrapper(localName = "colisAuLivreur", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ColisAuLivreur")
    @ResponseWrapper(localName = "colisAuLivreurResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ColisAuLivreurResponse")
    public Future<?> colisAuLivreurAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ColisAuLivreurResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "colisAuLivreur", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ColisAuLivreur")
    @ResponseWrapper(localName = "colisAuLivreurResponse", targetNamespace = "http://ensibs.projet.fr/", className = "preparation.ColisAuLivreurResponse")
    @Action(input = "http://ensibs.projet.fr/ServiceGestionnaire/colisAuLivreurRequest", output = "http://ensibs.projet.fr/ServiceGestionnaire/colisAuLivreurResponse")
    public boolean colisAuLivreur(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

}
